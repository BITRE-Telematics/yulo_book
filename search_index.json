[["index.html", "Yulo, a telematics story Welcome!", " Yulo, a telematics story Richard Geen 2021-09-06 Welcome! At the Bureau of Infrastructure and Transport Research Economics we have been running a program to turn telematics data into information about the road freight industry in Australia. Now that the code for our project is public were providing this document to talk about some of the problems weve faced and decisions weve made. There are many more that arent in here, but we hope it will help those who use our results, and those who use our code. Weve tried to make it readable and accessible. But first, why telematics? "],["why-telematics.html", "1 Why Telematics? Activity Roads Stops", " 1 Why Telematics? Why do anything with telematics at all? Its hard to get anywhere if you dont have goals, and we had three main goals heading into this project. To get information on activity, on the network, and on stops. Activity Our best source of data about the freight industry used to be Roads Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. Stops "],["what-the-data-looks-like-and-what-needs-to-be-done.html", "2 What the data looks like and what needs to be done 2.1 Repeated observations 2.2 Weirder errors", " 2 What the data looks like and what needs to be done We get data in a bunch of formats, including xml, json and csv but when it comes down to it telematics data is just a long list of observation. Each device pings every so often reporting I am here at this time. A longitude, a latitude, a time and an id. Thats it. Sometimes we might get some other things like a speedometer reading or even a direction (with we call an azimuth) but not usually. Turning this long list of pings into information about the freight network is not obvious. But first, lets just have a closer look at these pings and we notice some stuff that is funny even before we start. ## GPS error MELBOURNE MAP Here is the South Bank of Melbourne, and each dot is an observation. Its pretty obvious that most are on the motorway. But some are on the shoulder, some even in the wall and some inside buildings. This clearly isnt right, but GPS measurement error is a fact of life. Most of the time it is fine, but sometimes we need to account for the truck that says it is in a building when it is on the road. 2.1 Repeated observations When we first looked at the data wed occasionally note trucks that juststopped. It wasnt just that they were in the same place, they were in exactly the same place. A truck that has stopped usually looks like it is moving around just a little bit because of GPS error but these were in the same place for minutes on end, to 5-6 decimal places. More over they were doing this in the middle of the road, which didnt seem to be likely. In particular we noted them stopping here, on the M5 Motorway in Sydney. If you know Sydney you might start guessing what has happened. This is the entrance to a tunnel. GPS devices work by listening to satellites constantly shouting out where they are, but in a tunnel those satellites cannot be heard, so the GPS devices didnt know where they were. Unable to create a correct location, sometimes they would gave a error but other times they would just report the last place they were sure they had been, at the mouth of the tunnel. Subsequently, after a good time, apparently loitering at the entrance of the tunnel they would abruptly appear at the exit. Whatever we did would need to account for what happened in the tunnel even if the GPS couldnt tell us directly. 2.2 Weirder errors YELLOW MAPS Lastly, have a look at this group of traces (observations linked together in order) in Brisbane. Its very easy to see the outlines of motorways and other main roads, but something is definitely off. I think it is reasonable to suspect vehicles did not teleport, or fly or otherwise travel from Brisbane into the bush or Moreton Bay and back in minutes. For whatever reason this firm, although most of its data was fine, occasionally threw in complete bogies which we would need to account for. "],["trips-and-stops.html", "3 Trips and stops", " 3 Trips and stops Clustering - choice of language Geocoding including the shape of the country "],["what-roads-are-they-on.html", "4 What roads are they on? 4.1 Which data 4.2 What method?", " 4 What roads are they on? If we were to find out how trucks are using the road, we need to know which roads they are using. In fact, we need to know where the roads are. ##Matching to what? First we have to go on what seems like a digression but is pretty important to ones head around. What is a road and how do we get this idea of a road into a computer? We dont usually think about this because we dont need to. A road is the thing vehicles go on, but the Romans built them long before cars and mainly used them for marching. Theyre made of tar, except when theyre made of concrete or stone or, like a majority of Australias roads, just of dirt. They are the place where only vehicles can go, except when they are shared zones. Theyre the only place vehicles can go, except garages and driveways and carparks are not roadsor are they? Roads are on the ground, but they also use bridges and tunnels. So what is a road For our purposes we are looking at transport of road freight. Freight is moving stuff from one point to another place. A road is a thing we use to move from one place to another by surface land transport, like trucks in our case. Were not really worried about roads as a place, just a way of going between two places. In fact between many places and many places. This is how we put our messy idea of roads into a computer. The road outside the building you are now in is a way of getting to the next intersection, and from there the next intersection or curve in the road, and so on and until one gets to the next suburb, the next city, the next state. Essentially it looks like this. ADD STYLISED GRAPH Most people would call this a network. Mathematicians like calling it a graph. We have a bunch of points connected by lines. The points (or nodes) are our places, the lines (or edges) are what connect them. They are our roads. They have no width, just a start and an end. Theres a bunch of choices we make when we do this. How many places do we have. If a road is windy and not straight we probably want to add more points and more lines so we can see better where it goes and how long it is, but how precise we are is a choice, trading off precision to avoid a dataset that is too ungainly. Itd be impractical for every edge between two nodes to be called a road by itself, lest every kink in a road creates a new road. So instead we group them together into string of nodes and edges. But how long are these groupings? Imagine you are at the shops in Newtown, in Sydney. What road are you on? Most people would say King St, which goes from Broadway down to St Peters. But King St is also the Princes Highway, which keeps going to Kogarah, to Nowra, to Melbourne and all the way to Adelaide. Thats far too long for our purposes, since what happens on King St doesnt affect Western Victoria, but even King St is too long if there is more traffic north of the intersection with Enmore Rd than South of it. So in the end these groupings are also choices about what seems practical and useful. From now on, we will call these groupings segments. And that is our task, find out what segments the trucks in our data set are using. 4.1 Which data So where do we get this data? It might seem strange but governments dont always have this right on hand already. After all, different levels of government manage different roads, and many roads arent built by government. Different state governments may have their own data set, but most roads are local and many local councils just know where the roads are. Government, collectively, has this information, but not in a single data set. But other organisations do need a single dataset, most notably many telematics and mapping firms. Such data is essential to their businesses and they charge accordingly. But quite apart from the expense, whats the use of our data if it can only be used by others that are also able or prepapared to shell out these huge funds. Its also unclear how quickly we can get updates. Trucks will start using a motorway the moment it is opened, but is that in the data yet? And if there is a mistake, we might fix it for ourselves but that doesnt help any other user of our data with the road data they paid for. These private providers are also somewhat coy about how they collated their data, and Im pretty sure I know why ASTRONAUT MEME OpenSteetMap (OSM) is like Wikipedia for spatial data, created and policed by an open group of dedicated volunteers. But unlike Wikipedia, which is read by many people, most users of OSM dont know they are using it. It underlies many popular apps whether providing public transport information or Pokemon Go and is relied on by even the biggest of firms. This is usally only obvious when things go wrong, for instance some unexpected results in Flight Simulator, made the Bing Maps owner Microsoft. I also suspect it was the reason for some unexpected nomenclature in Google Maps. OSM data is free to everyone, which means if our data is matched to it, anyone can use it. If we find a mistake we can fix it, and the fix is there for everyone, and best of all, it gives us access to lots of tools. 4.2 What method? So how do we match trucks to the segments. Remember from Part 2 that inevitable GPS error means observations are always jumping around with random noise. Morever our road segments are one dimensional, even if the GPS was entirely accurate the trucks wouldnt be on the line unless they were in the middle of the road, which we hope they arent! The easiest method is just assuming they are on whichever segment is closest. This is called nearest neighbour matching. The computer takes segments within a given radius and checks which one is closest. Simple, but there are problems. The first is random error is often enough to put an observation closer to a side road, or to a road next to a motorway. Thats obvious from the image of Southbank we saw in Part 2. We want something more accurate than that. The second is, even if it is accurate, we only learn about the segment the truck was using when it pinged. We have data every 1 to 5 minutes, but a truck may have used many segments in that time, but we only learn about one of them. You might think that with enough data youd get information about every segment eventually but its not that simple. Some segments will never give us observations because they are in tunnels where the GPS until cannot hear the satellites. We still care about these,in fact theyre usually incredibly important motorways. Less obviously this biases our sample towards slower vehicles. Imagine two vehicles, one fast and one slow, both reporting one a minute. The fast vehicle goes twice as fast as the slow. The fast vehicle uses 10 segments in a minute, and is recorded on one. The slow vehicle takes 2 minutes and reports twice. Two thirds of our observations for these segments are from the slow vehicle. The real average speed is 75 per cent of the fast vehicle, but our data makes it looks like 66 per cent. This is a stylised example but these keep adding up. Slower vehicles spend more time on any given segment, so they are more likely to be on it when they ping, and all our data gets biased. And thats when we have speed data anyway. Ideally wed use something else. ## HMMM and other benefits - speed, tunnels and require changes to Barefoot Think back to the South Melbourne map again. Its obvious to us that some of the points that are to the side of the motorway or on surface streets are really on the motorway, by why is it obvious. If we joined the dots in order itd be even clearer. Trucks that are on the motorway are much more likely to have stayed on the motorway than to have left it via an offramp to get to a surface road that is close to the motorway. In short we are balancing the probabilities that the observation is on the right road with how probable it is that the truck would have taken the route necessary to get there. This is the core of Hidden Markov Map Matching. We select candidates from segments near to the observation and calculate routes to each of them from the last observation. Segments closer to the observation are more likely, segments that have shorter routes on higher graded routes are also more likely. Our choice is the balance of the two. But how do we match the first observation? Well there we still have to use nearest neighbour. For those who care this is why it is called Hidden Markov Map Matching. Like a Markov chain the probability of the next observations location is a function of the last observation, but it is hidden because our first observation was an educated guess. And we match to a map. In the pic PICPICPIC we can see a vehicle has moved from observation I on segment a. It is now at II. It is closer to segment b, but the route to segment c is much quicker, we conclude it is actually on c. Not only is this more accurate but we immediately get other benefits. Since we calculated the likely route we also know the road segments the vehicle used, even if it didnt ping on them, or if they were in a tunnel. Now we have data on all segments. We also have the length of the route and the time it took, which means we can calculate an average speed as well. This is great too because it isnt biased towards slower vehicles and it better reflects travel experience than point estimates that can be zero (at a traffic light) or momentariyl faster than average. Most importantly, this gives us speeds from the vast majority of vehicles for which we have to speed data. ##Further bogies (exponential error, pre matched AP data, need for subtrips - gap filing, OSM highway junction) We ran into other problems we didnt expect. Some of these are related to a known problem with HMMM. Whilst the average error with HMMM is much less than nearest neighbour matching, when it does make an error it gets much worse quickly. Say HMMM mistakenly thinks a truck has turned off a motorway when it is still one. The next observation will likely be on the motorway. In that case the map matching might try to get the truck back on to the motorway by routing it to the nearest on ramp. Alternately it might deem this too unlikely and decide the next observation is in error and the truck is still on a side road. In either case the route is longer than the one thr truck actually took so it appears that the truck is going very fast. And from then, if it has decided the truck is not on the motorway, itll do the same process again, and again, with errors getting larger until it decides all options are too improbable and starts again. Fortunately this is relatively rare and can be managed with judiciously managed parameters. Or so we thought. We ran into two unexpected problems. Data from one firm in particular was giving us problems. Very often, when trucks from this firm were travelling along motorways Barefoot would determine they were jumping from small residential surface street to small residential surface street, tearing in and out of cul de sacs at high speed and only rarely returning to the motorway. Why did Barefoot think this was more likely than the motorway. Indeed when we looked at the raw data each offending observation was closer to the side streets than the motorway, but the algorithm was meant to account for this. But they werent just closer to the side streets, they were right on it. And not just right on the area of the street but on the two dimensional line representing the street in the data. That precise placement is extremely unlikely in even perfectly accurate data, unless they were driving in the middle of the road. What had clearly happened was at some point the telematics provider for this firm had already matched the data to roads with nearest neighbour and corrected the pings. By the time Barefoot saw the data it had to weight the unliklihood of the route against the unlikelihood it wasnt on the street which it appeared to be perfectly placed. To be honest we never solved this problem. The firm providing the data had started providing it in a different form that wasnt pre matched, although they were unaware of any pre matching, so we never had to deal with it. The second unexpected problem looked similar but was quite different. Instead of a single firms trucks being mistakenly taken off motorways all over the country, every firms trucks were being taken off some particular stretches of motorway. We first noticed this on Southern Cross Drive in Brisbane. Barefoot would, without fail, route the vehicles onto an off ramp and onto surface streets. It wasnt that it didnt know the next observation was on the motorway, in fact most of the time it came back on to the motorway at another on ramp to get close to the recorded position, even it it mean travelling in the reverse position. For whatever reason, Barefoot simply didnt know the trucks could just keep going along the motorway. But why? The road segments were connected after all, and the one way direction was correct. Furthermore it wasnt just a Barefoot error. If we used the Open Source Routing Machine [footnote wirrten in c not Java] built into OSMs display and asked for directions it would also route us off. We asked on the forums but other users, though helpful, were also baffled. Eventually, comparing offramps that were mistakenly taken and those that werent led us to a revelation. ADD PICS. All the ones that worked were marked with a node labelled motorway junction. All those that didnt work were just a plain, unlabelled node. It seems what happens is this: -Motorway segments have the attribute motorway. Motorway on and off ramps have the attribute motorway_link -If a motorway_link is connected to a motorway the node where they connect must be marked motorway junction. -If it is not labelled motorway junction a routing graph built from this data will deem the motorway only connected to the motorway_link and not the continuing motorway. As far as we can tell this wasnt documented anyway, but it was easy to fix, not just for ourselves but for all users of Australian OSM data. Fortunately it only applied to segments of motorway and motorway_link and not, say, to primary and primary_link so we spent an afternoon travelling along every stretch of motorway in Australia. In Sydney one user had systematically labelled each node just before each off ramp as a motorway junction instead of the one at the off ramp. Apparently they had, not foolishly, assumed the node label indicated where the turn off sign was! We had one other unexpected problem. Barefoots designer were all too aware of broad category of problems we faced here - exponential error from wrong decisions and disconnected road systems due to map data error - and had built in safeguards. Barefoot would stop investigating a particular route if it exceeded a certain threshold, say 15km. This means that, if the road network was disconnected from the correct road, or the routing had departed the true route before, or even if the truck has genuinely left the road network the engine would not futilely search the entire country for a way there, which would take up resources to no end. Instead it would just give an error when no route was found. Barefoot is designed for tracking vehicles providing data every few seconds so this isnt a big deal, but were are using it to do batches of data reporting a position every minute or so. This caused some problems. Imagine a vehicle in South Western Sydney. It leaves a deport and heads South on the Hume Highway towards Canberra. But for whatever reason its GPS unit has conked out for 10 minutes. By the time it come back online the truck has travelled 10 minutes at 100km per hour, or nearly 17km. Barefoot tries the correct route, but stops at 15km and tries every other route within 15km of the depot, and then reports an error. We end up with no map matching for the trip, but it also took a lot of time and computation to get that error. We could increase the threshold to 20km, but that just means we still have the same problem when the system conks out for 15 minutes, and it would take even longer to get that error. Itd also take longer when the other kinds of problem arise. Our solution was fairly simple as a result. If we had a big time gap in a trip, wed split it before giving it to Barefoot, and joing it back together later. We wouldnt get speed or road data for that time, but averaging over 10 or 15 minutes likely wouldnt tell us much about individual segments anyway. Wed still likely want to know the distance travelled, but we could impute that from our own instance of the Open Source Routing Machine, which I will discuss later. So now we have a bunch of stops and a bunch of trips, the road segments used on those trips, and the speed they went. Its a lot of data, how do we handle it? "],["storage---why-a-graph.html", "5 Storage - Why a graph?", " 5 Storage - Why a graph? Why graph The problem with relation databases - the tour query in particular what would our graph look like -Why neo4j Cypher v gremlin or graphql load csv "],["what-weve-done-so-far.html", "6 What weve done so far", " 6 What weve done so far example work OD pairs unpublished congestion - covid19 paper then congestion report experience of building up a route etc small numbers -&gt; Bayes in lockdown assumptions tweaks Port Maps "],["why-yulo.html", "7 Why Yulo 7.1 A section", " 7 Why Yulo All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 7.1 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
